{"version":3,"sources":["components/FriendCard/index.js","components/Title/index.js","components/Table.js","App.js","service-worker.js","index.js"],"names":["FriendCard","props","console","log","className","alt","name","src","friend","Title","children","Table","columns","data","useState","filterNameInput","setFilterNameInput","filterOccupationInput","setFilterOccupationInput","filterLocationInput","setFilterLocationInput","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","value","onChange","e","target","undefined","placeholder","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps","App","setData","useEffect","friends","useMemo","Header","accessor","Cell","setTable","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"40FAeeA,MAZf,SAAoBC,GAElB,OADAC,QAAQC,IAAIF,GAEV,qBAAKG,UAAU,OAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKC,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,c,MCD1BC,MAJf,SAAeR,GACb,OAAO,oBAAIG,UAAU,QAAd,SAAuBH,EAAMS,Y,qBCDvB,SAASC,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAEzC,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA0DF,mBAAS,IAAnE,mBAAOG,EAAP,KAA8BC,EAA9B,KACA,EAAsDJ,mBAAS,IAA/D,mBAAOK,EAAP,KAA4BC,EAA5B,KAIE,EAOIC,mBACA,CACFT,UACAC,QAEFS,aACAC,aAZEC,EADF,EACEA,cACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,KACAC,EALF,EAKEA,WACAC,EANF,EAMEA,UA+BH,OACC,qCACD,sBAAKzB,UAAU,SAAf,UACD,uBACgC0B,MAAOf,EACPgB,SA1BF,SAAAC,GAC1B,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCL,EAAU,OAAQC,GAClBd,EAAmBc,IA0BSK,YAAa,gBAE7C,uBACgCL,MAAOb,EACPc,SA5BF,SAAAC,GAC1B,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCL,EAAU,aAAcC,GACxBZ,EAAyBY,IA4BGK,YAAa,gBAE7C,uBACgCL,MAAOX,EACPY,SA7BF,SAAAC,GAC1B,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCL,EAAU,WAAYC,GACtBV,EAAuBU,IA6BKK,YAAa,uBAG7C,kDAAWX,KAAX,cACE,gCACSE,EAAaU,KAAI,SAAAC,GAAW,OAC3B,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC7B,8CACMA,EAAOC,eAAeD,EAAOE,yBADnC,IAEEtC,UACEoC,EAAOG,SACHH,EAAOI,aACL,YACA,WACF,GAPR,SAUGJ,EAAOK,OAAO,wBAMzB,iDAAWpB,KAAX,aACGE,EAAKS,KAAI,SAACU,EAAKC,GAEd,OADAnB,EAAWkB,GAET,8CAAQA,EAAIE,eAAZ,aACGF,EAAIG,MAAMb,KAAI,SAAAc,GACb,OACE,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKL,OAAO,8B,MC7B/CO,MAhEf,WAEE,MAAwBtC,mBAAS,IAAjC,mBAAOD,EAAP,KAAawC,EAAb,KAGAC,qBAAU,WAEND,EADWE,KAGZ,IAEH,IAAM3C,EAAU4C,mBACd,iBAAM,CACJ,CAEEC,OAAQ,WAER7C,QAAS,CACP,CACE6C,OAAQ,OACRC,SAAU,QAGZ,CACED,OAAQ,OACRC,SAAU,gBAKhB,CAEED,OAAQ,UAER7C,QAAS,CACP,CACE6C,OAAQ,kBACRC,SAAU,YAEZ,CACED,OAAQ,WACRC,SAAU,QACVC,KAAM,gBAAW7B,EAAX,EAAGoB,KAAQpB,MAAX,OAAyB,cAAC,EAAD,CAAYtB,OAAQsB,WAM3D,IAGA,OACE,sBAAK1B,UAAU,MAAf,UAEA,cAAC,EAAD,4BACE,cAACO,EAAD,CACAC,QAASA,EACTC,KAAMA,EACN+C,SAAUP,QCtDEQ,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASrB,OAAO,cAAC,EAAD,IAASsB,SAASC,eAAe,SD2HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.929867b2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  console.log(props)\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.friend} />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { useState } from \"react\";\nimport { useTable, useFilters, useSortBy } from \"react-table\";\n\nexport default function Table({ columns, data }) {\n// Create a state\nconst [filterNameInput, setFilterNameInput] = useState(\"\");\nconst [filterOccupationInput, setFilterOccupationInput] = useState(\"\");\nconst [filterLocationInput, setFilterLocationInput] = useState(\"\");\n\n\n  // Use the useTable Hook to send the columns and data to build the table\n  const {\n    getTableProps, // table props from react-table\n    getTableBodyProps, // table body props from react-table\n    headerGroups, // headerGroups, if your table has groupings\n    rows, // rows for the table based on the data passed\n    prepareRow, \n    setFilter // Prepare the row (this function needs to be called for each row before getting the row props)\n  } = useTable(\n      {\n    columns,\n    data\n  },\n  useFilters,\n  useSortBy// This plugin Hook will help to sort our table columns\n  );\n\n  const handleFilterChangeN = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"name\", value);\n    setFilterNameInput(value);\n  };\n  const handleFilterChangeO = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"occupation\", value);\n    setFilterOccupationInput(value);\n  };\n  \n  const handleFilterChangeL = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"location\", value);\n    setFilterLocationInput(value);\n  };\n  \n  /* \n    Render the UI for your table\n    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\n  */\n return (\n  <>\n <div className=\"search\">\n<input\n                                value={filterNameInput}\n                                onChange={\n                                    handleFilterChangeN\n                                }\n                                placeholder={\"Search Name\"}\n                              /> \n<input\n                                value={filterOccupationInput}\n                                onChange={\n                                    handleFilterChangeO\n                                }\n                                placeholder={\"Search Role\"}\n                              /> \n<input\n                                value={filterLocationInput}\n                                onChange={\n                                    handleFilterChangeL\n                                }\n                                placeholder={\"Search Location\"}\n                              />\n</div> \n<table {...getTableProps()}>\n  <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  className={\n                    column.isSorted\n                      ? column.isSortedDesc\n                        ? \"sort-desc\"\n                        : \"sort-asc\"\n                      : \"\"\n                  }\n                >\n                  {column.render(\"Header\")}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      </>\n  );\n}","import React, { useState, useEffect, useMemo} from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport Table from \"./components/Table\";\n\nimport \"./App.css\";\n\nfunction App(){\n\n  const [data, setData] = useState([]);\n\n// Using useEffect to call the json once mounted and set the data\n  useEffect(() => {\n    const data = friends;\n      setData(data);\n\n  }, []);\n\n  const columns = useMemo(\n    () => [\n      {\n        // first group - Employee\n        Header: \"Employee\",\n        // First group columns\n        columns: [\n          {\n            Header: \"Name\",\n            accessor: \"name\"\n   \n          },\n          {\n            Header: \"Role\",\n            accessor: \"occupation\"\n         \n          }\n        ]\n      },\n      {\n        // Second group - Details\n        Header: \"Details\",\n        // Second group columns\n        columns: [\n          {\n            Header: \"Branch Location\",\n            accessor: \"location\",\n          },\n          {\n            Header: \"Headshot\",\n            accessor: \"image\",\n            Cell: ({ cell: { value } }) => <FriendCard friend={value}/>\n          },\n        ]\n      }\n    ],\n    \n    []\n  );\n\n    return (\n      <div className=\"App\">\n    \n      <Title>Employee List</Title>\n        <Table \n        columns={columns} \n        data={data} \n        setTable={setData}/>\n        </div>\n    );\n  }\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}
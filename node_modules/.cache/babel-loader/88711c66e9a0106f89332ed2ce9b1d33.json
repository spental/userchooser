{"ast":null,"code":"var _jsxFileName = \"/Users/kyle/Desktop/userchooser/src/components/Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useTable, useFilters, useSortBy } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Table({\n  columns,\n  data\n}) {\n  _s();\n\n  // Create a state\n  const [filterNameInput, setFilterNameInput] = useState(\"\");\n  const [filterOccupationInput, setFilterOccupationInput] = useState(\"\");\n  const [filterLocationInput, setFilterLocationInput] = useState(\"\"); // Use the useTable Hook to send the columns and data to build the table\n\n  const {\n    getTableProps,\n    // table props from react-table\n    getTableBodyProps,\n    // table body props from react-table\n    headerGroups,\n    // headerGroups, if your table has groupings\n    rows,\n    // rows for the table based on the data passed\n    prepareRow,\n    setFilter // Prepare the row (this function needs to be called for each row before getting the row props)\n\n  } = useTable({\n    columns,\n    data\n  }, useFilters, useSortBy // This plugin Hook will help to sort our table columns\n  );\n\n  const handleFilterChangeN = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"name\", value);\n    setFilterNameInput(value);\n  };\n\n  const handleFilterChangeO = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"occupation\", value);\n    setFilterOccupationInput(value);\n  };\n\n  const handleFilterChangeL = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"location\", value);\n    setFilterLocationInput(value);\n  };\n  /* \n    Render the UI for your table\n    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\n  */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: filterNameInput,\n        onChange: handleFilterChangeN,\n        placeholder: \"Search Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: filterOccupationInput,\n        onChange: handleFilterChangeO,\n        placeholder: \"Search Role\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: filterLocationInput,\n        onChange: handleFilterChangeL,\n        placeholder: \"Search Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n            className: column.isSorted ? column.isSortedDesc ? \"sort-desc\" : \"sort-asc\" : \"\",\n            children: column.render(\"Header\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Table, \"V+2LQ0DxXPCIyebLhsAFbPTfE8M=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/kyle/Desktop/userchooser/src/components/Table.js"],"names":["React","useState","useTable","useFilters","useSortBy","Table","columns","data","filterNameInput","setFilterNameInput","filterOccupationInput","setFilterOccupationInput","filterLocationInput","setFilterLocationInput","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","handleFilterChangeN","e","value","target","undefined","handleFilterChangeO","handleFilterChangeL","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useTable, useFilters, useSortBy } from \"react-table\";\n\nexport default function Table({ columns, data }) {\n// Create a state\nconst [filterNameInput, setFilterNameInput] = useState(\"\");\nconst [filterOccupationInput, setFilterOccupationInput] = useState(\"\");\nconst [filterLocationInput, setFilterLocationInput] = useState(\"\");\n\n\n  // Use the useTable Hook to send the columns and data to build the table\n  const {\n    getTableProps, // table props from react-table\n    getTableBodyProps, // table body props from react-table\n    headerGroups, // headerGroups, if your table has groupings\n    rows, // rows for the table based on the data passed\n    prepareRow, \n    setFilter // Prepare the row (this function needs to be called for each row before getting the row props)\n  } = useTable(\n      {\n    columns,\n    data\n  },\n  useFilters,\n  useSortBy// This plugin Hook will help to sort our table columns\n  );\n\n  const handleFilterChangeN = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"name\", value);\n    setFilterNameInput(value);\n  };\n  const handleFilterChangeO = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"occupation\", value);\n    setFilterOccupationInput(value);\n  };\n  \n  const handleFilterChangeL = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"location\", value);\n    setFilterLocationInput(value);\n  };\n  \n  /* \n    Render the UI for your table\n    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\n  */\n return (\n  <>\n <div className=\"search\">\n<input\n                                value={filterNameInput}\n                                onChange={\n                                    handleFilterChangeN\n                                }\n                                placeholder={\"Search Name\"}\n                              /> \n<input\n                                value={filterOccupationInput}\n                                onChange={\n                                    handleFilterChangeO\n                                }\n                                placeholder={\"Search Role\"}\n                              /> \n<input\n                                value={filterLocationInput}\n                                onChange={\n                                    handleFilterChangeL\n                                }\n                                placeholder={\"Search Location\"}\n                              />\n</div> \n<table {...getTableProps()}>\n  <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  className={\n                    column.isSorted\n                      ? column.isSortedDesc\n                        ? \"sort-desc\"\n                        : \"sort-asc\"\n                      : \"\"\n                  }\n                >\n                  {column.render(\"Header\")}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      </>\n  );\n}"]},"metadata":{},"sourceType":"module"}